name: Build Android

on: 
  workflow_dispatch: {}
  push:
    branches:
      - personal

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle' # See 'Supported distributions' for available options
          java-version: '17' # only 11 works for this project 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26c
          add-to-path: true

      - name: Install Cordova
        run: npm install -g cordova

      - name: Install yarn
        run: npm install -g yarn

      - name: Install App Dependencies
        run: yarn

      - name: Setup App Dependencies
        run: yarn setup

      - name: Configure Platform
        run: yarn clean

      - name: Build Android apk
        run: yarn build android
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      # - name: Build Android prod aab
      #   run: yarn build android
      #   env:
      #     ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      # - name: Sign
      #   run: |
      #         sudo chmod 777 ./utils/scripts/sign.sh
      #         ./utils/scripts/sign.sh

      - name: Upload dev APK
        uses: actions/upload-artifact@v3
        with:
          name: acodenode-debug.zip
          path: ./*.apk

      # - name: Upload release bundle
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app-release
      #     path: ./*.aab

  release:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip --junk-paths acodenode-debug README.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./acodenode-debug.zip
          asset_name: acodenode-debug.zip
          asset_content_type: application/zip
